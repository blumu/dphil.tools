# by William Blum
# Version of 05/12/2007

OMakeVersion(0.9.8.5, 0.9.8.5)
open Dotnet

.STATIC:
    FSHARP_BIN = $(CheckProgDirEnvVar fsc,FSHARP_HOME,C:\Program Files\FSharp-1.9.6.2,/bin)

FSC="$(FSHARP_BIN)/fsc.exe"
FSYACC="$(FSHARP_BIN)/fsyacc.exe"
FSLEX="$(FSHARP_BIN)/fslex.exe"
RESXC="$(FSHARP_BIN)/resxc.exe"

    
public.FSFLAGS=--fullpaths --nowarn 40
if $(defined DEBUG)
    FSFLAGS+=-Ooff -g
    export
else
    FSFLAGS+=-O
    export

public.FSFLAGS_EXE=--target winexe
if $(defined DEBUG)
    FSFLAGS_EXE+=
    export
else
    FSFLAGS_EXE+=--standalone
    export
public.FSFLAGS_DLL=--target library
public.FSYACCFLAGS=
public.FSLEXFLAGS=
public.FSRESXCFLAGS=
public.RESGEN_FLAGS=


%.ml %.mli: %.mly
    $(FSYACC) $(FSYACCFLAGS) $< -o $*.ml

%.ml: %.mll
    $(FSLEX) $(FSLEXFLAGS) $< -o $@

%.resources: %.resx
    $(RESXC) $(FSRESXCFLAGS) $<

#%.resources: %.resx
#    $(RESGEN) $(RESGEN_FLAGS) $<


#### To build an .exe .Net assembly
####
# Parameters:
#  name
#  files
# Additional variables used:
#  FS_INCLUDEPATH
#  FS_OTHER_DLLREFS
#  FS_DEP_DLLS
#  FS_RESOURCES_FILES
#  FSFLAGS
public.FSharpAssembly(name, files) =  
    protected.RCFILES  = $(addsuffix .resources, $(FS_RESOURCES_FILES))
    protected.OTHER_DLLS = $(addsuffix .dll, $(FS_OTHER_DLLREFS))
    protected.DEP_DLLS = $(addprefix $(OUTPUTDIR)/, $(addsuffix .dll, $(FS_DEP_DLLS)))

    protected.name = $(file $(name))
    protected.PROG = $(file $(OUTPUTDIR)/$(name)$(EXE))
    
    if $(defined FORMONO)
        foreach(res, $(FS_RESOURCES_FILES))
            RCFILES+="$(res)+$(res).resources"
            export
        export
        
    #
    # Rules to build byte-code and native targets
    #
    # Create additionnal dummy resource files (this is necessary to overcome a bug in Mono)
    foreach(res, $(FS_RESOURCES_FILES))
        $(res)+$(res).resx: $(res).resx
            cp $(res).resx "$(res)+$(res).resx"
                
    $(PROG): $(RCFILES) $(files) $(DEP_DLLS)
        @echo "- F# compilation..."
        $(FSC) $(FSFLAGS) $(FSFLAGS_EXE) \
                $(mapprefix -I, $(FS_INCLUDEPATH)) $(mapprefix -r, $(DEP_DLLS)) $(mapprefix -r, $(OTHER_DLLS)) \
                $(mapprefix --resource, $(RCFILES)) \
                $(files) -o $@
        @echo "***********************************************************" \
        && echo "The assembly $(PROG) has been created successfuly" \
        && echo "***********************************************************"

    return $(PROG) 
    
    
 
#### To build an .dll .Net assembly
####
# Parameters:
#  name
#  files
# Additional variables used:
#  FS_INCLUDEPATH
#  FS_OTHER_DLLREFS
#  FS_DEP_DLLS
#  FS_RESOURCES_FILES
#  FSFLAGS
public.FSharpDllAssembly(name, files) =  
    protected.RCFILES  = $(addsuffix .resources, $(FS_RESOURCES_FILES))
    protected.OTHER_DLLS = $(addsuffix .dll, $(FS_OTHER_DLLREFS))
    protected.DEP_DLLS = $(addprefix $(OUTPUTDIR)/, $(addsuffix .dll, $(FS_DEP_DLLS)))

    protected.name = $(file $(name))
    protected.DLLASM = $(file $(OUTPUTDIR)/$(name)$(EXT_DLL))
    
    if $(defined FORMONO)
        foreach(res, $(FS_RESOURCES_FILES))
            RCFILES+="$(res)+$(res).resources"
            export
        export
        
    #
    # Rules to build byte-code and native targets
    #
    # Create additionnal dummy resource files (this is necessary to overcome a bug in Mono)
    foreach(res, $(FS_RESOURCES_FILES))
        $(res)+$(res).resx: $(res).resx
            cp $(res).resx "$(res)+$(res).resx"
                
    $(DLLASM): $(RCFILES) $(files) $(DEP_DLLS)
        @echo "- F# compilation..."
        $(FSC) $(FSFLAGS) $(FSFLAGS_DLL)\
                $(mapprefix -I, $(FS_INCLUDEPATH)) $(mapprefix -r, $(DEP_DLLS)) $(mapprefix -r, $(OTHER_DLLS)) \
                $(mapprefix --resource, $(RCFILES)) \
                $(files) -o $@
        @echo "***********************************************************" \
        && echo "The assembly $(DLLASM) has been created successfuly" \
        && echo "***********************************************************"

    return $(DLLASM) 
       
    
   
