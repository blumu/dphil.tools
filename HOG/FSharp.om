# by William Blum
# Version of 05/12/2007

OMakeVersion(0.9.8.5, 0.9.8.5)
open Dotnet

.STATIC:
    FSC_EXISTS = $(CheckProg fsc)

FSHARP_HOME=$(if $(FSC_EXISTS),$(EMPTY),$(getenv FSHARP_HOME, C:\Program Files\FSharp-1.9.3.7))
FSC="$(FSHARP_HOME)\bin\fsc.exe"
FSYACC="$(FSHARP_HOME)\bin\fsyacc.exe"
FSLEX="$(FSHARP_HOME)\bin\fslex.exe"
RESXC="$(FSHARP_HOME)\bin\resxc.exe"

    
public.FSFLAGS=--fullpaths --progress --no-warn 40 --target-winexe
if $(defined DEBUG)
    FSFLAGS+=-Ooff -g
    export
else
    FSFLAGS+=--standalone -O3
    export
public.FSYACCFLAGS=
public.FSLEXFLAGS=
public.FSRESXCFLAGS=
public.RESGEN_FLAGS=


%.ml %.mli: %.mly
    $(FSYACC) $(FSYACCFLAGS) $< -o $*.ml

%.ml: %.mll
    $(FSLEX) $(FSLEXFLAGS) $< -o $@

%.resources: %.resx
    $(RESXC) $(FSRESXCFLAGS) $<

#%.resources: %.resx
#    $(RESGEN) $(RESGEN_FLAGS) $<


#### To build an .exe .net assembly
####
public.FSharpAssembly(name, files) =  
    protected.RCFILES  = $(addsuffix .resources, $(FS_RESOURCES_FILES))
    protected.OTHER_DLLS = $(addsuffix .dll, $(FS_OTHER_DLLREFS))
    protected.DEP_DLLS = $(addprefix $(OUTPUTDIR)/, $(addsuffix .dll, $(FS_DEP_DLLS)))

    protected.name = $(file $(name))
    protected.PROG = $(file $(OUTPUTDIR)/$(name)$(EXE))
    
    if $(defined FORMONO)
        foreach(res, $(FS_RESOURCES_FILES))
            RCFILES+="$(res)+$(res).resources"
            export
        export
        
    #
    # Rules to build byte-code and native targets
    #
    # Create additionnal dummy resource files (this is necessary to overcome a bug in Mono)
    foreach(res, $(FS_RESOURCES_FILES))
        $(res)+$(res).resx: $(res).resx
            cp $(res).resx "$(res)+$(res).resx"
                
    $(PROG): $(RCFILES) $(files) $(DEP_DLLS)
        @echo "- F# compilation..."
        $(FSC) $(FSFLAGS) \
                $(mapprefix -I, $(FS_INCLUDEPATH)) $(mapprefix -r, $(DEP_DLLS)) $(mapprefix -r, $(OTHER_DLLS)) \
                $(mapprefix --resource, $(RCFILES)) \
                $(files) -o $@
        @echo "***********************************************************" \
        && echo "The assembly $(PROG) has been created successfuly" \
        && echo "***********************************************************"

    return $(PROG) 
   
